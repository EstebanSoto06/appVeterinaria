package interfaces;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Random;
import javax.swing.JOptionPane;
import logica.Cita;
import logica.Cliente;
import logica.GestorDatos;
import logica.Mascota;


public class CRUD_Citas extends javax.swing.JPanel {
    private GestorDatos gestordatos;
    private List<Cliente> listaClientes;
    private List<Mascota> listaMascotas;
    private List<Cita> listaCitas;
    private int citaIndex;
    /**
     * Creates new form CRUD_Clientes
     */
    public CRUD_Citas(GestorDatos gestordatos) {
        initComponents();
        
        this.gestordatos = gestordatos;
        this.listaClientes = gestordatos.getListaClientes();
        this.listaMascotas = gestordatos.getListaMascotas();
        this.listaCitas = gestordatos.getListaCitas();
        this.citaIndex = -1;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbDetalles = new javax.swing.JLabel();
        lbNombreCliente = new javax.swing.JLabel();
        lbMotivo = new javax.swing.JLabel();
        txtDetalles = new javax.swing.JTextField();
        txtNombreCliente = new javax.swing.JTextField();
        btnEliminar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        btnAnadir = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        lbHora = new javax.swing.JLabel();
        cbHora = new javax.swing.JComboBox<>();
        cbMascotas = new javax.swing.JComboBox<>();
        lbNombreMascota = new javax.swing.JLabel();
        lbFecha = new javax.swing.JLabel();
        cbMotivo = new javax.swing.JComboBox<>();
        dtFecha = new com.toedter.calendar.JDateChooser();
        btnCargarMascotas = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 255, 255));
        setMaximumSize(new java.awt.Dimension(1280, 569));
        setMinimumSize(new java.awt.Dimension(1280, 569));
        setPreferredSize(new java.awt.Dimension(1280, 569));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbDetalles.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lbDetalles.setForeground(new java.awt.Color(0, 0, 0));
        lbDetalles.setText("Detalles");
        add(lbDetalles, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 150, -1, -1));

        lbNombreCliente.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lbNombreCliente.setForeground(new java.awt.Color(0, 0, 0));
        lbNombreCliente.setText("Nombre del dueño");
        add(lbNombreCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 150, -1, -1));

        lbMotivo.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lbMotivo.setForeground(new java.awt.Color(0, 0, 0));
        lbMotivo.setText("Motivo");
        add(lbMotivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 150, -1, -1));

        txtDetalles.setBackground(new java.awt.Color(255, 255, 255));
        txtDetalles.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtDetalles.setForeground(new java.awt.Color(0, 0, 0));
        add(txtDetalles, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 180, 460, 30));

        txtNombreCliente.setBackground(new java.awt.Color(255, 255, 255));
        txtNombreCliente.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtNombreCliente.setForeground(new java.awt.Color(0, 0, 0));
        txtNombreCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombreClienteKeyTyped(evt);
            }
        });
        add(txtNombreCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 180, 260, 30));

        btnEliminar.setBackground(new java.awt.Color(0, 102, 102));
        btnEliminar.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        btnEliminar.setForeground(new java.awt.Color(255, 255, 255));
        btnEliminar.setText("ELIMINAR");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 360, -1, -1));

        btnBuscar.setBackground(new java.awt.Color(0, 102, 102));
        btnBuscar.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        btnBuscar.setForeground(new java.awt.Color(255, 255, 255));
        btnBuscar.setText("BUSCAR");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        add(btnBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 360, -1, -1));

        btnAnadir.setBackground(new java.awt.Color(0, 102, 102));
        btnAnadir.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        btnAnadir.setForeground(new java.awt.Color(255, 255, 255));
        btnAnadir.setText("PROGRAMAR CITA");
        btnAnadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnadirActionPerformed(evt);
            }
        });
        add(btnAnadir, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 360, -1, -1));

        btnModificar.setBackground(new java.awt.Color(0, 102, 102));
        btnModificar.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        btnModificar.setForeground(new java.awt.Color(255, 255, 255));
        btnModificar.setText("MODIFICAR");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });
        add(btnModificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 360, -1, -1));

        lbHora.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lbHora.setForeground(new java.awt.Color(0, 0, 0));
        lbHora.setText("Hora");
        add(lbHora, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 240, -1, -1));

        cbHora.setBackground(new java.awt.Color(255, 255, 255));
        cbHora.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cbHora.setForeground(new java.awt.Color(0, 0, 0));
        cbHora.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "8am", "9am", "10am", "11am", "1pm", "2pm", "3pm", "4pm" }));
        cbHora.setSelectedIndex(-1);
        add(cbHora, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 270, 140, 30));

        cbMascotas.setBackground(new java.awt.Color(255, 255, 255));
        cbMascotas.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cbMascotas.setForeground(new java.awt.Color(0, 0, 0));
        add(cbMascotas, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 260, 260, 30));

        lbNombreMascota.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lbNombreMascota.setForeground(new java.awt.Color(0, 0, 0));
        lbNombreMascota.setText("Mascota");
        add(lbNombreMascota, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 230, -1, -1));

        lbFecha.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lbFecha.setForeground(new java.awt.Color(0, 0, 0));
        lbFecha.setText("Fecha");
        add(lbFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 240, -1, -1));

        cbMotivo.setBackground(new java.awt.Color(255, 255, 255));
        cbMotivo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cbMotivo.setForeground(new java.awt.Color(0, 0, 0));
        cbMotivo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Consulta", "Operación", "Revisión" }));
        cbMotivo.setSelectedIndex(-1);
        add(cbMotivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 180, 260, 30));

        dtFecha.setBackground(new java.awt.Color(255, 255, 255));
        dtFecha.setForeground(new java.awt.Color(0, 0, 0));
        add(dtFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 270, 120, 30));

        btnCargarMascotas.setBackground(new java.awt.Color(0, 102, 102));
        btnCargarMascotas.setForeground(new java.awt.Color(255, 255, 255));
        btnCargarMascotas.setText("Cargar");
        btnCargarMascotas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarMascotasActionPerformed(evt);
            }
        });
        add(btnCargarMascotas, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 260, 70, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnAnadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnadirActionPerformed
        boolean clienteExiste = false;
        String nombreCliente = txtNombreCliente.getText();
        
        for (Cliente cliente : listaClientes) {
            if (cliente.getNombre().equals(nombreCliente)) {
                clienteExiste = true;
                break;
            }
        }
        
        if (clienteExiste){
            if (cbMascotas.getItemCount() > 0) {
                String nombreMascota = (String) cbMascotas.getSelectedItem();
                String motivo = (String) cbMotivo.getSelectedItem();
                String detalles = txtDetalles.getText();
                String hora = (String) cbHora.getSelectedItem();
                Date fechaDate = dtFecha.getDate();
                
                // Convertir fecha a string con formato dia/mes/año
                SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
                String fechaString = sdf.format(fechaDate);
                
                if (nombreCliente == null || nombreCliente.isEmpty() || nombreMascota == null || nombreMascota.isEmpty() || detalles == null || detalles.isEmpty() || motivo == null || motivo.isEmpty() || hora == null || hora.isEmpty() || fechaString == null || fechaString.isEmpty() ) {
                JOptionPane.showMessageDialog(this, "No deben de haber espacios en blanco", "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    Random random = new Random();
                    int numero = random.nextInt(900) + 100;
                    String numeroCita = String.valueOf(numero);
 
                    Cita nuevaCita = new Cita(numeroCita, nombreCliente, nombreMascota, motivo, detalles, hora, fechaString);
                    listaCitas.add(nuevaCita);
                    gestordatos.escribirCitas(listaCitas);
                    gestordatos.setListaCitas(listaCitas);
                    JOptionPane.showMessageDialog(this, "Cita programada", "Success", JOptionPane.INFORMATION_MESSAGE);
                }    
            } else {
                JOptionPane.showMessageDialog(this, "Este cliente no tiene mascotas", "Error", JOptionPane.ERROR_MESSAGE);
            }        
        } else {
            JOptionPane.showMessageDialog(this, "No se ha encontrado el cliente", "Error", JOptionPane.ERROR_MESSAGE);
        }        
    }//GEN-LAST:event_btnAnadirActionPerformed

    private void btnCargarMascotasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarMascotasActionPerformed
        cbMascotas.removeAllItems();

        String nombreCliente = txtNombreCliente.getText();

        for (Mascota mascota : listaMascotas) {
            if (mascota.getDuenno().equals(nombreCliente)) {
                cbMascotas.addItem(mascota.getNombre());
            }
        }
    }//GEN-LAST:event_btnCargarMascotasActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        String numeroCita = JOptionPane.showInputDialog(this, "Ingrese el número de cita de 3 dígitos:", "Buscar Cita", JOptionPane.QUESTION_MESSAGE);
        boolean citaEncontrada = false;
        
        int index = 0;
        if (numeroCita != null && numeroCita.matches("\\d{3}")) {
            for (Cita cita : listaCitas) {
                if (cita.getNumeroCita().equals(numeroCita)) {
                    cbMascotas.removeAllItems();
                    citaEncontrada = true;
                    citaIndex = index;
                    
                    txtNombreCliente.setText(cita.getNombreCliente());
                    txtDetalles.setText(cita.getDetalles());
                    cbMascotas.addItem(cita.getNombreMascota());
                    cbMotivo.setSelectedItem(cita.getMotivo());
                    cbHora.setSelectedItem(cita.getHora());
                    
                    SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
                    Date fechaCita = null;
                    try {
                        fechaCita = sdf.parse(cita.getFecha());
                    } catch (ParseException ex) {
                        ex.printStackTrace();
                    }
                    dtFecha.setDate(fechaCita);
                    
                    break;
                } else {
                    index++;
                }
            }

            if (!citaEncontrada) {
                JOptionPane.showMessageDialog(this, "La cita con el número " + numeroCita + " no fue encontrada.", "Cita No Encontrada", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Debe ingresar un número de cita válido de 3 dígitos.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        if (this.citaIndex == -1){
            JOptionPane.showMessageDialog(this, "Ningúna cita seleccionada", "Error", JOptionPane.ERROR_MESSAGE);
        } else {  
            String nombreCliente = txtNombreCliente.getText();
            String nombreMascota = (String) cbMascotas.getSelectedItem();
            String motivo = (String) cbMotivo.getSelectedItem();
            String detalles = txtDetalles.getText();
            String hora = (String) cbHora.getSelectedItem();
            Date fechaDate = dtFecha.getDate();

            // Convertir fecha a string con formato dia/mes/año
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            String fechaString = sdf.format(fechaDate);

            if (nombreCliente == null || nombreCliente.isEmpty() || nombreMascota == null || nombreMascota.isEmpty() || detalles == null || detalles.isEmpty() || motivo == null || motivo.isEmpty() || hora == null || hora.isEmpty() || fechaString == null || fechaString.isEmpty() ) {
                JOptionPane.showMessageDialog(this, "No deben de haber espacios en blanco", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                String numeroCita = listaCitas.get(citaIndex).getNumeroCita();
                Cita citaModificada = new Cita(numeroCita, nombreCliente, nombreMascota, motivo, detalles, hora, fechaString);
                listaCitas.add(citaModificada);
                gestordatos.escribirCitas(listaCitas);
                gestordatos.setListaCitas(listaCitas);
                JOptionPane.showMessageDialog(this, "Cita modificada", "Success", JOptionPane.INFORMATION_MESSAGE);
                citaIndex = -1;
            }
        }
    }//GEN-LAST:event_btnModificarActionPerformed

    private void txtNombreClienteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreClienteKeyTyped
        cbMascotas.removeAllItems();
    }//GEN-LAST:event_txtNombreClienteKeyTyped

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        if (this.citaIndex == -1){
            JOptionPane.showMessageDialog(this, "Ningúna cita seleccionada", "Error", JOptionPane.ERROR_MESSAGE);
        } else {            
            listaCitas.remove(citaIndex);
            gestordatos.escribirCitas(listaCitas);
            gestordatos.setListaCitas(listaCitas);
            JOptionPane.showMessageDialog(this, "Cita eliminada", "Success", JOptionPane.INFORMATION_MESSAGE);
            citaIndex = -1;
        }
    }//GEN-LAST:event_btnEliminarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnadir;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnCargarMascotas;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JComboBox<String> cbHora;
    private javax.swing.JComboBox<String> cbMascotas;
    private javax.swing.JComboBox<String> cbMotivo;
    private com.toedter.calendar.JDateChooser dtFecha;
    private javax.swing.JLabel lbDetalles;
    private javax.swing.JLabel lbFecha;
    private javax.swing.JLabel lbHora;
    private javax.swing.JLabel lbMotivo;
    private javax.swing.JLabel lbNombreCliente;
    private javax.swing.JLabel lbNombreMascota;
    private javax.swing.JTextField txtDetalles;
    private javax.swing.JTextField txtNombreCliente;
    // End of variables declaration//GEN-END:variables
}
