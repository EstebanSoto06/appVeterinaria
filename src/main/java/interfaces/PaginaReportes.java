package interfaces;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import logica.GestorDatos;
import logica.HistorialClinico;

public class PaginaReportes extends javax.swing.JPanel {
    private GestorDatos gestordatos;
    private List<HistorialClinico> listaHistorialesClinicos;
    /**
     * Creates new form CRUD_Clientes
     */
    public PaginaReportes(GestorDatos gestordatos) {
        initComponents();
        
        this.gestordatos = gestordatos;
        this.listaHistorialesClinicos = gestordatos.getListaHistorialesClinicos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGenerarReporte = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 255, 255));
        setMaximumSize(new java.awt.Dimension(1280, 569));
        setMinimumSize(new java.awt.Dimension(1280, 569));
        setPreferredSize(new java.awt.Dimension(1280, 569));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnGenerarReporte.setBackground(new java.awt.Color(0, 102, 102));
        btnGenerarReporte.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        btnGenerarReporte.setForeground(new java.awt.Color(255, 255, 255));
        btnGenerarReporte.setText("GENERAR REPORTE");
        btnGenerarReporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarReporteActionPerformed(evt);
            }
        });
        add(btnGenerarReporte, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 210, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnGenerarReporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarReporteActionPerformed
        String consultasPorMascota = "";
        String medicamentosPorMascota = "";
        String topMascotas = "";
        List<String> top3Mascotas = new ArrayList<>();
        Map<String, Integer> totalVisitasPorMascota = new HashMap<>();
        
        int diagnosticos = 0;
        int tratamientos = 0;
        int estudiosclinicos = 0;
        int total = 0;
        int index = 0;
        

        for (HistorialClinico historial : listaHistorialesClinicos) {
            for (String palabra : historial.getAnalisisMedicos()) {
                if (palabra.equals("Diagnostico")) {
                    diagnosticos++;
                } else if (palabra.equals("Tratamiento")) {
                    tratamientos++;
                } else if (palabra.equals("Estudio Clinico")) {
                    estudiosclinicos++;
                }
            }
            consultasPorMascota += historial.getNombreMascota() + " Diagnosticos:" + diagnosticos +  ", Tratamientos:" + tratamientos + ", Estudios clinicos:" + estudiosclinicos + "\n";
            medicamentosPorMascota += historial.getNombreMascota() + " Medicamentos:" + historial.getMedicamentos() + "\n";
            total = diagnosticos + tratamientos + estudiosclinicos;
               
            totalVisitasPorMascota.put(historial.getNombreMascota(), total);
            index = top3Mascotas.size();
            if (top3Mascotas.isEmpty() || top3Mascotas.size() < 3 || total > totalVisitasPorMascota.get(top3Mascotas.get(index - 1))) {
                top3Mascotas.clear();
                totalVisitasPorMascota.entrySet().stream()
                    .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))
                    .limit(3)
                    .forEach(entry -> top3Mascotas.add(entry.getKey()));
            }
             
            index = 0;
            diagnosticos = 0;
            tratamientos = 0;
            estudiosclinicos = 0;
            total = 0;
        }
        
        for (int i = 0; i < top3Mascotas.size(); i++) {
            String nombreMascota = top3Mascotas.get(i);
            int totalVisitas = totalVisitasPorMascota.getOrDefault(nombreMascota, 0);
            topMascotas += (i + 1) + ". " + nombreMascota + ": " + totalVisitas + " visitas \n";
        }
        
        StringBuilder reporte = new StringBuilder("Reporte \n");
        reporte.append("CONSULTAS POR MASCOTA: \n" + consultasPorMascota);
        reporte.append("MEDICAMENTOS POR MASCOTA: \n" + medicamentosPorMascota);
        reporte.append("TOP 3 MASCOTAS: \n" + topMascotas);
        JOptionPane.showMessageDialog(null, reporte.toString(), "REPORTE", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnGenerarReporteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGenerarReporte;
    // End of variables declaration//GEN-END:variables
}
